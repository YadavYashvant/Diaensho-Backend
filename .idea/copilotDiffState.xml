<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.dockerignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.dockerignore" />
              <option name="updatedContent" value="# Exclude build artifacts and unnecessary files&#10;target/&#10;!target/diaensho-backend-*.jar&#10;&#10;# Maven&#10;.mvn/&#10;mvnw&#10;mvnw.cmd&#10;&#10;# IDE files&#10;.idea/&#10;*.iml&#10;.vscode/&#10;.settings/&#10;.project&#10;.classpath&#10;&#10;# OS files&#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Git&#10;.git/&#10;.gitignore&#10;&#10;# Documentation&#10;README.md&#10;HELP.md&#10;LICENSE&#10;&#10;# Logs&#10;*.log&#10;&#10;# Temporary files&#10;*.tmp&#10;*.swp&#10;*~&#10;&#10;# Node modules (if any)&#10;node_modules/" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="# Multi-stage build for Spring Boot application&#10;FROM maven:3.9.4-eclipse-temurin-17 AS build&#10;&#10;# Set working directory&#10;WORKDIR /app&#10;&#10;# Copy pom.xml first to leverage Docker cache&#10;COPY pom.xml .&#10;&#10;# Download dependencies (this layer will be cached if pom.xml doesn't change)&#10;RUN mvn dependency:go-offline -B&#10;&#10;# Copy source code&#10;COPY src ./src&#10;&#10;# Build the application&#10;RUN mvn clean package -DskipTests&#10;&#10;# Production stage&#10;FROM eclipse-temurin:17-jre-jammy&#10;&#10;# Install curl for health checks&#10;RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;# Create a non-root user for security&#10;RUN groupadd -r spring &amp;&amp; useradd -r -g spring spring&#10;&#10;# Set working directory&#10;WORKDIR /app&#10;&#10;# Copy the built JAR from the build stage&#10;COPY --from=build /app/target/diaensho-backend-*.jar app.jar&#10;&#10;# Change ownership to spring user&#10;RUN chown spring:spring app.jar&#10;&#10;# Switch to non-root user&#10;USER spring&#10;&#10;# Expose the port the app runs on&#10;EXPOSE 8080&#10;&#10;# Add health check&#10;HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \&#10;    CMD curl -f http://localhost:8080/actuator/health || exit 1&#10;&#10;# Set JVM options for containerized environment&#10;ENV JAVA_OPTS=&quot;-Xmx512m -Xms256m -Djava.security.egd=file:/dev/./urandom&quot;&#10;ENV SPRING_PROFILES_ACTIVE=prod&#10;&#10;# Run the application&#10;ENTRYPOINT [&quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -jar app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  diaensho-backend:&#10;    build: .&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      - SPRING_PROFILES_ACTIVE=prod&#10;      - DATABASE_URL=jdbc:postgresql://pg-27c89fc-lirice.b.aivencloud.com:16806/defaultdb?sslmode=require&#10;      - DATABASE_USERNAME=avnadmin&#10;      - DATABASE_PASSWORD=AVNS_axf0eg5kjmzrNIH4fib&#10;      - GEMINI_API_KEY=AIzaSyAnCvX2Ml_DAnVAen2TyE1I9ZWvxXy9Ddg&#10;      - JWT_SECRET=diaensho_secret_key_that_is_long_enough_for_hmac_sha256_algorithm&#10;      - JWT_EXPIRATION=86400000&#10;    restart: unless-stopped&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8080/actuator/health&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;      start_period: 40s" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.5.4&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#9;&lt;groupId&gt;com.example&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;diaensho-backend&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;name&gt;diaensho-backend&lt;/name&gt;&#10;&#9;&lt;description&gt;Backend service for Diaensho app.&lt;/description&gt;&#10;&#9;&lt;url/&gt;&#10;&#9;&lt;licenses&gt;&#10;&#9;&#9;&lt;license/&gt;&#10;&#9;&lt;/licenses&gt;&#10;&#9;&lt;developers&gt;&#10;&#9;&#9;&lt;developer/&gt;&#10;&#9;&lt;/developers&gt;&#10;&#9;&lt;scm&gt;&#10;&#9;&#9;&lt;connection/&gt;&#10;&#9;&#9;&lt;developerConnection/&gt;&#10;&#9;&#9;&lt;tag/&gt;&#10;&#9;&#9;&lt;url/&gt;&#10;&#9;&lt;/scm&gt;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;17&lt;/java.version&gt;&#10;&#9;&lt;/properties&gt;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;jjwt&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;0.9.1&lt;/version&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&#9;&lt;optional&gt;true&lt;/optional&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.5.4&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#9;&lt;groupId&gt;com.example&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;diaensho-backend&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;name&gt;diaensho-backend&lt;/name&gt;&#10;&#9;&lt;description&gt;Backend service for Diaensho app.&lt;/description&gt;&#10;&#9;&lt;url/&gt;&#10;&#9;&lt;licenses&gt;&#10;&#9;&#9;&lt;license/&gt;&#10;&#9;&lt;/licenses&gt;&#10;&#9;&lt;developers&gt;&#10;&#9;&#9;&lt;developer/&gt;&#10;&#9;&lt;/developers&gt;&#10;&#9;&lt;scm&gt;&#10;&#9;&#9;&lt;connection/&gt;&#10;&#9;&#9;&lt;developerConnection/&gt;&#10;&#9;&#9;&lt;tag/&gt;&#10;&#9;&#9;&lt;url/&gt;&#10;&#9;&lt;/scm&gt;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;17&lt;/java.version&gt;&#10;&#9;&lt;/properties&gt;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;0.11.5&lt;/version&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;0.11.5&lt;/version&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;0.11.5&lt;/version&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&#9;&lt;optional&gt;true&lt;/optional&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/config/CorsConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/config/CorsConfig.java" />
              <option name="updatedContent" value="package com.example.diaensho_backend.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.cors.CorsConfiguration;&#10;import org.springframework.web.cors.CorsConfigurationSource;&#10;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;&#10;&#10;import java.util.Arrays;&#10;&#10;@Configuration&#10;public class CorsConfig {&#10;    &#10;    @Bean&#10;    public CorsConfigurationSource corsConfigurationSource() {&#10;        CorsConfiguration configuration = new CorsConfiguration();&#10;        configuration.setAllowedOriginPatterns(Arrays.asList(&quot;*&quot;));&#10;        configuration.setAllowedMethods(Arrays.asList(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;));&#10;        configuration.setAllowedHeaders(Arrays.asList(&quot;*&quot;));&#10;        configuration.setAllowCredentials(true);&#10;        configuration.setExposedHeaders(Arrays.asList(&quot;Authorization&quot;));&#10;        &#10;        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();&#10;        source.registerCorsConfiguration(&quot;/**&quot;, configuration);&#10;        return source;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/controllers/SearchController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/controllers/SearchController.java" />
              <option name="originalContent" value=" " />
              <option name="updatedContent" value="package com.example.diaensho_backend.controllers;&#10;&#10;import com.example.diaensho_backend.dto.SearchResponse;&#10;import com.example.diaensho_backend.entities.User;&#10;import com.example.diaensho_backend.repositories.UserRepository;&#10;import com.example.diaensho_backend.services.DatabaseSearchService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/search&quot;)&#10;public class SearchController {&#10;    @Autowired&#10;    private DatabaseSearchService searchService;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @GetMapping&#10;    public List&lt;SearchResponse&gt; search(@RequestParam(&quot;q&quot;) String query, @AuthenticationPrincipal UserDetails userDetails) {&#10;        User user = userRepository.findByUsername(userDetails.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        return searchService.searchSummaries(query, user);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/controllers/UsageStatsController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/controllers/UsageStatsController.java" />
              <option name="originalContent" value=" " />
              <option name="updatedContent" value="package com.example.diaensho_backend.controllers;&#10;&#10;import com.example.diaensho_backend.dto.AppUsageStatRequest;&#10;import com.example.diaensho_backend.entities.AppUsageStat;&#10;import com.example.diaensho_backend.entities.User;&#10;import com.example.diaensho_backend.repositories.AppUsageStatRepository;&#10;import com.example.diaensho_backend.repositories.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/usage-stats&quot;)&#10;public class UsageStatsController {&#10;    @Autowired&#10;    private AppUsageStatRepository appUsageStatRepository;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @PostMapping&#10;    public AppUsageStat createUsageStat(@RequestBody AppUsageStatRequest request, @AuthenticationPrincipal UserDetails userDetails) {&#10;        User user = userRepository.findByUsername(userDetails.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        AppUsageStat stat = new AppUsageStat();&#10;        stat.setPackageName(request.getPackageName());&#10;        stat.setTotalTimeInForeground(request.getTotalTimeInForeground());&#10;        stat.setDate(request.getDate());&#10;        stat.setUser(user);&#10;        &#10;        return appUsageStatRepository.save(stat);&#10;    }&#10;&#10;    @PostMapping(&quot;/batch&quot;)&#10;    public List&lt;AppUsageStat&gt; createUsageStats(@RequestBody List&lt;AppUsageStatRequest&gt; requests, @AuthenticationPrincipal UserDetails userDetails) {&#10;        User user = userRepository.findByUsername(userDetails.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        List&lt;AppUsageStat&gt; stats = requests.stream().map(request -&gt; {&#10;            AppUsageStat stat = new AppUsageStat();&#10;            stat.setPackageName(request.getPackageName());&#10;            stat.setTotalTimeInForeground(request.getTotalTimeInForeground());&#10;            stat.setDate(request.getDate());&#10;            stat.setUser(user);&#10;            return stat;&#10;        }).toList();&#10;        &#10;        return appUsageStatRepository.saveAll(stats);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/AppUsageStatRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/AppUsageStatRequest.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.dto;&#10;&#10;import java.time.LocalDate;&#10;&#10;public class AppUsageStatRequest {&#10;    private String packageName;&#10;    private Long totalTimeInForeground;&#10;    private LocalDate date;&#10;    // Getters and setters&#10;} " />
              <option name="updatedContent" value="package com.example.diaensho_backend.dto;&#10;&#10;import java.time.LocalDate;&#10;&#10;public class AppUsageStatRequest {&#10;    private String packageName;&#10;    private Long totalTimeInForeground;&#10;    private LocalDate date;&#10;    &#10;    // Getters and setters&#10;    public String getPackageName() {&#10;        return packageName;&#10;    }&#10;&#10;    public void setPackageName(String packageName) {&#10;        this.packageName = packageName;&#10;    }&#10;&#10;    public Long getTotalTimeInForeground() {&#10;        return totalTimeInForeground;&#10;    }&#10;&#10;    public void setTotalTimeInForeground(Long totalTimeInForeground) {&#10;        this.totalTimeInForeground = totalTimeInForeground;&#10;    }&#10;&#10;    public LocalDate getDate() {&#10;        return date;&#10;    }&#10;&#10;    public void setDate(LocalDate date) {&#10;        this.date = date;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/AuthRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/AuthRequest.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.dto;&#10;&#10;public class AuthRequest {&#10;    private String username;&#10;    private String password;&#10;    // Getters and setters&#10;} " />
              <option name="updatedContent" value="package com.example.diaensho_backend.dto;&#10;&#10;public class AuthRequest {&#10;    private String username;&#10;    private String password;&#10;    &#10;    // Getters and setters&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/AuthResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/AuthResponse.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.dto;&#10;&#10;public class AuthResponse {&#10;    private String token;&#10;    // Getters and setters&#10;} " />
              <option name="updatedContent" value="package com.example.diaensho_backend.dto;&#10;&#10;public class AuthResponse {&#10;    private String token;&#10;    &#10;    // Getters and setters&#10;    public String getToken() {&#10;        return token;&#10;    }&#10;&#10;    public void setToken(String token) {&#10;        this.token = token;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/DailySummaryResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/DailySummaryResponse.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.dto;&#10;&#10;import java.time.LocalDate;&#10;&#10;public class DailySummaryResponse {&#10;    private String content;&#10;    private String highlights;&#10;    private LocalDate date;&#10;    // Getters and setters&#10;} " />
              <option name="updatedContent" value="package com.example.diaensho_backend.dto;&#10;&#10;import java.time.LocalDate;&#10;&#10;public class DailySummaryResponse {&#10;    private String content;&#10;    private String highlights;&#10;    private LocalDate date;&#10;    &#10;    // Getters and setters&#10;    public String getContent() {&#10;        return content;&#10;    }&#10;&#10;    public void setContent(String content) {&#10;        this.content = content;&#10;    }&#10;&#10;    public String getHighlights() {&#10;        return highlights;&#10;    }&#10;&#10;    public void setHighlights(String highlights) {&#10;        this.highlights = highlights;&#10;    }&#10;&#10;    public LocalDate getDate() {&#10;        return date;&#10;    }&#10;&#10;    public void setDate(LocalDate date) {&#10;        this.date = date;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/DiaryEntryRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/DiaryEntryRequest.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.dto;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;public class DiaryEntryRequest {&#10;    private String text;&#10;    private LocalDateTime timestamp;&#10;    // Getters and setters&#10;} " />
              <option name="updatedContent" value="package com.example.diaensho_backend.dto;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;public class DiaryEntryRequest {&#10;    private String text;&#10;    private LocalDateTime timestamp;&#10;    &#10;    // Getters and setters&#10;    public String getText() {&#10;        return text;&#10;    }&#10;&#10;    public void setText(String text) {&#10;        this.text = text;&#10;    }&#10;&#10;    public LocalDateTime getTimestamp() {&#10;        return timestamp;&#10;    }&#10;&#10;    public void setTimestamp(LocalDateTime timestamp) {&#10;        this.timestamp = timestamp;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/SearchResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/dto/SearchResponse.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.dto;&#10;&#10;import java.time.LocalDate;&#10;&#10;public class SearchResponse {&#10;    private Long id;&#10;    private String content;&#10;    private String highlights;&#10;    private LocalDate date;&#10;    // Getters and setters&#10;} " />
              <option name="updatedContent" value="package com.example.diaensho_backend.dto;&#10;&#10;import java.time.LocalDate;&#10;&#10;public class SearchResponse {&#10;    private Long id;&#10;    private String content;&#10;    private String highlights;&#10;    private LocalDate date;&#10;&#10;    // Getters and setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getContent() {&#10;        return content;&#10;    }&#10;&#10;    public void setContent(String content) {&#10;        this.content = content;&#10;    }&#10;&#10;    public String getHighlights() {&#10;        return highlights;&#10;    }&#10;&#10;    public void setHighlights(String highlights) {&#10;        this.highlights = highlights;&#10;    }&#10;&#10;    public LocalDate getDate() {&#10;        return date;&#10;    }&#10;&#10;    public void setDate(LocalDate date) {&#10;        this.date = date;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/entities/AppUsageStat.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/entities/AppUsageStat.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.entities;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDate;&#10;&#10;@Entity&#10;@Table(name = &quot;app_usage_stats&quot;)&#10;public class AppUsageStat {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false)&#10;    private String packageName;&#10;&#10;    @Column(nullable = false)&#10;    private Long totalTimeInForeground;&#10;&#10;    @Column(nullable = false)&#10;    private LocalDate date;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;)&#10;    private User user;&#10;&#10;    // Getters and setters&#10;    // ...&#10;} " />
              <option name="updatedContent" value="package com.example.diaensho_backend.entities;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDate;&#10;&#10;@Entity&#10;@Table(name = &quot;app_usage_stats&quot;)&#10;public class AppUsageStat {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false)&#10;    private String packageName;&#10;&#10;    @Column(nullable = false)&#10;    private Long totalTimeInForeground;&#10;&#10;    @Column(nullable = false)&#10;    private LocalDate date;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;)&#10;    private User user;&#10;&#10;    // Getters and setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getPackageName() {&#10;        return packageName;&#10;    }&#10;&#10;    public void setPackageName(String packageName) {&#10;        this.packageName = packageName;&#10;    }&#10;&#10;    public Long getTotalTimeInForeground() {&#10;        return totalTimeInForeground;&#10;    }&#10;&#10;    public void setTotalTimeInForeground(Long totalTimeInForeground) {&#10;        this.totalTimeInForeground = totalTimeInForeground;&#10;    }&#10;&#10;    public LocalDate getDate() {&#10;        return date;&#10;    }&#10;&#10;    public void setDate(LocalDate date) {&#10;        this.date = date;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/entities/DailySummary.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/entities/DailySummary.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.entities;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDate;&#10;&#10;@Entity&#10;@Table(name = &quot;daily_summaries&quot;)&#10;public class DailySummary {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, columnDefinition = &quot;TEXT&quot;)&#10;    private String content;&#10;&#10;    @Column(nullable = false, columnDefinition = &quot;TEXT&quot;)&#10;    private String highlights;&#10;&#10;    @Column(nullable = false)&#10;    private LocalDate date;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;)&#10;    private User user;&#10;&#10;    // Getters and setters&#10;    // ...&#10;} " />
              <option name="updatedContent" value="package com.example.diaensho_backend.entities;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDate;&#10;&#10;@Entity&#10;@Table(name = &quot;daily_summaries&quot;)&#10;public class DailySummary {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, columnDefinition = &quot;TEXT&quot;)&#10;    private String content;&#10;&#10;    @Column(nullable = false, columnDefinition = &quot;TEXT&quot;)&#10;    private String highlights;&#10;&#10;    @Column(nullable = false)&#10;    private LocalDate date;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;)&#10;    private User user;&#10;&#10;    // Getters and setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getContent() {&#10;        return content;&#10;    }&#10;&#10;    public void setContent(String content) {&#10;        this.content = content;&#10;    }&#10;&#10;    public String getHighlights() {&#10;        return highlights;&#10;    }&#10;&#10;    public void setHighlights(String highlights) {&#10;        this.highlights = highlights;&#10;    }&#10;&#10;    public LocalDate getDate() {&#10;        return date;&#10;    }&#10;&#10;    public void setDate(LocalDate date) {&#10;        this.date = date;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/entities/DiaryEntry.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/entities/DiaryEntry.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.entities;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;diary_entries&quot;)&#10;public class DiaryEntry {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, columnDefinition = &quot;TEXT&quot;)&#10;    private String text;&#10;&#10;    @Column(nullable = false)&#10;    private LocalDateTime timestamp;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;)&#10;    private User user;&#10;&#10;    // Getters and setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getText() {&#10;        return text;&#10;    }&#10;&#10;    public void setText(String text) {&#10;        this.text = text;&#10;    }&#10;&#10;    public LocalDateTime getTimestamp() {&#10;        return timestamp;jdbc:postgresql://localhost:5432/diaensho&#10;    }&#10;&#10;    public void setTimestamp(LocalDateTime timestamp) {&#10;        this.timestamp = timestamp;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.diaensho_backend.entities;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;diary_entries&quot;)&#10;public class DiaryEntry {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, columnDefinition = &quot;TEXT&quot;)&#10;    private String text;&#10;&#10;    @Column(nullable = false)&#10;    private LocalDateTime timestamp;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;)&#10;    private User user;&#10;&#10;    // Getters and setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getText() {&#10;        return text;&#10;    }&#10;&#10;    public void setText(String text) {&#10;        this.text = text;&#10;    }&#10;&#10;    public LocalDateTime getTimestamp() {&#10;        return timestamp;&#10;    }&#10;&#10;    public void setTimestamp(LocalDateTime timestamp) {&#10;        this.timestamp = timestamp;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/entities/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/entities/User.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.entities;&#10;&#10;import jakarta.persistence.*;&#10;import java.util.*;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;public class User {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String username;&#10;&#10;    @Column(nullable = false)&#10;    private String password;&#10;&#10;    @ElementCollection(fetch = FetchType.EAGER)&#10;    @CollectionTable(name = &quot;user_roles&quot;, joinColumns = @JoinColumn(name = &quot;user_id&quot;))&#10;    @Column(name = &quot;role&quot;)&#10;    private Set&lt;String&gt; roles = new HashSet&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true)&#10;    private List&lt;DiaryEntry&gt; diaryEntries = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true)&#10;    private List&lt;AppUsageStat&gt; appUsageStats = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true)&#10;    private List&lt;DailySummary&gt; dailySummaries = new ArrayList&lt;&gt;();&#10;&#10;    // Getters and setters&#10;    // ...&#10;} " />
              <option name="updatedContent" value="package com.example.diaensho_backend.entities;&#10;&#10;import jakarta.persistence.*;&#10;import java.util.*;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;public class User {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String username;&#10;&#10;    @Column(nullable = false)&#10;    private String password;&#10;&#10;    @ElementCollection(fetch = FetchType.EAGER)&#10;    @CollectionTable(name = &quot;user_roles&quot;, joinColumns = @JoinColumn(name = &quot;user_id&quot;))&#10;    @Column(name = &quot;role&quot;)&#10;    private Set&lt;String&gt; roles = new HashSet&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true)&#10;    private List&lt;DiaryEntry&gt; diaryEntries = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true)&#10;    private List&lt;AppUsageStat&gt; appUsageStats = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true)&#10;    private List&lt;DailySummary&gt; dailySummaries = new ArrayList&lt;&gt;();&#10;&#10;    // Getters and setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public Set&lt;String&gt; getRoles() {&#10;        return roles;&#10;    }&#10;&#10;    public void setRoles(Set&lt;String&gt; roles) {&#10;        this.roles = roles;&#10;    }&#10;&#10;    public List&lt;DiaryEntry&gt; getDiaryEntries() {&#10;        return diaryEntries;&#10;    }&#10;&#10;    public void setDiaryEntries(List&lt;DiaryEntry&gt; diaryEntries) {&#10;        this.diaryEntries = diaryEntries;&#10;    }&#10;&#10;    public List&lt;AppUsageStat&gt; getAppUsageStats() {&#10;        return appUsageStats;&#10;    }&#10;&#10;    public void setAppUsageStats(List&lt;AppUsageStat&gt; appUsageStats) {&#10;        this.appUsageStats = appUsageStats;&#10;    }&#10;&#10;    public List&lt;DailySummary&gt; getDailySummaries() {&#10;        return dailySummaries;&#10;    }&#10;&#10;    public void setDailySummaries(List&lt;DailySummary&gt; dailySummaries) {&#10;        this.dailySummaries = dailySummaries;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/security/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/security/SecurityConfig.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.security;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;&#10;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;&#10;@Configuration&#10;@EnableMethodSecurity&#10;public class SecurityConfig {&#10;    @Autowired&#10;    private JwtAuthenticationFilter jwtAuthenticationFilter;&#10;    @Autowired&#10;    private UserDetailsService userDetailsService;&#10;&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http.csrf().disable()&#10;            .authorizeHttpRequests()&#10;                .requestMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                .anyRequest().authenticated()&#10;            .and()&#10;            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);&#10;        http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {&#10;        return http.getSharedObject(AuthenticationManagerBuilder.class)&#10;                .userDetailsService(userDetailsService)&#10;                .passwordEncoder(passwordEncoder())&#10;                .and()&#10;                .build();&#10;    }&#10;} " />
              <option name="updatedContent" value="package com.example.diaensho_backend.security;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;&#10;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;import org.springframework.web.cors.CorsConfigurationSource;&#10;&#10;@Configuration&#10;@EnableMethodSecurity&#10;public class SecurityConfig {&#10;    @Autowired&#10;    private JwtAuthenticationFilter jwtAuthenticationFilter;&#10;    @Autowired&#10;    private UserDetailsService userDetailsService;&#10;    @Autowired&#10;    private CorsConfigurationSource corsConfigurationSource;&#10;&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http.cors(cors -&gt; cors.configurationSource(corsConfigurationSource))&#10;            .csrf(csrf -&gt; csrf.disable())&#10;            .authorizeHttpRequests(authz -&gt; authz&#10;                .requestMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                .anyRequest().authenticated()&#10;            )&#10;            .sessionManagement(session -&gt; session&#10;                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)&#10;            );&#10;        http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {&#10;        return http.getSharedObject(AuthenticationManagerBuilder.class)&#10;                .userDetailsService(userDetailsService)&#10;                .passwordEncoder(passwordEncoder())&#10;                .and()&#10;                .build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/services/AiSummaryService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/services/AiSummaryService.java" />
              <option name="originalContent" value="package com.example.diaensho_backend.services;&#10;&#10;import com.example.diaensho_backend.entities.*;&#10;import com.example.diaensho_backend.repositories.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.scheduling.annotation.Scheduled;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.reactive.function.client.WebClient;&#10;import reactor.core.publisher.Mono;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Service&#10;public class AiSummaryService {&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;    @Autowired&#10;    private DiaryEntryRepository diaryEntryRepository;&#10;    @Autowired&#10;    private AppUsageStatRepository appUsageStatRepository;&#10;    @Autowired&#10;    private DailySummaryRepository dailySummaryRepository;&#10;    @Autowired&#10;    private ElasticsearchService elasticsearchService;&#10;    @Autowired&#10;    private WebClient.Builder webClientBuilder;&#10;&#10;    private static final String GEMINI_API_URL = &quot;https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=YOUR_GEMINI_API_KEY&quot;;&#10;    private static final String PROMPT_TEMPLATE = &quot;You are an insightful diary assistant. The following is a collection of raw, timestamped thoughts and app screen time data from a user's day. Your task is to: 1. Correct any spelling or grammatical errors in the thoughts. 2. Weave all the information into a cohesive, first-person narrative summary of the day. 3. Separately, identify 1-3 of the most inquisitive, creative, or exciting thoughts and list them under a '## Highlights' section.&quot;;&#10;&#10;    @Scheduled(cron = &quot;0 0 23 * * *&quot;)&#10;    public void generateDailySummaries() {&#10;        LocalDate today = LocalDate.now();&#10;        List&lt;User&gt; users = userRepository.findAll();&#10;        for (User user : users) {&#10;            List&lt;DiaryEntry&gt; entries = diaryEntryRepository.findAllByUserAndTimestampBetween(&#10;                    user, today.atStartOfDay(), today.plusDays(1).atStartOfDay());&#10;            List&lt;AppUsageStat&gt; stats = appUsageStatRepository.findAllByUserAndDate(user, today);&#10;            if (entries.isEmpty() &amp;&amp; stats.isEmpty()) continue;&#10;            StringBuilder prompt = new StringBuilder(PROMPT_TEMPLATE + &quot;\n\n&quot;);&#10;            prompt.append(&quot;Diary Entries:\n&quot;);&#10;            for (DiaryEntry entry : entries) {&#10;                prompt.append(&quot;[&quot;).append(entry.getTimestamp()).append(&quot;] &quot;).append(entry.getText()).append(&quot;\n&quot;);&#10;            }&#10;            prompt.append(&quot;\nApp Usage Stats:\n&quot;);&#10;            for (AppUsageStat stat : stats) {&#10;                prompt.append(stat.getPackageName()).append(&quot;: &quot;)&#10;                        .append(stat.getTotalTimeInForeground()).append(&quot; seconds\n&quot;);&#10;            }&#10;            callGeminiAndSaveSummary(user, today, prompt.toString());&#10;        }&#10;    }&#10;&#10;    private void callGeminiAndSaveSummary(User user, LocalDate date, String prompt) {&#10;        WebClient webClient = webClientBuilder.build();&#10;        Mono&lt;String&gt; responseMono = webClient.post()&#10;                .uri(GEMINI_API_URL)&#10;                .bodyValue(new GeminiRequest(prompt))&#10;                .retrieve()&#10;                .bodyToMono(String.class);&#10;        responseMono.subscribe(response -&gt; {&#10;            String content = extractContent(response);&#10;            String highlights = extractHighlights(response);&#10;            DailySummary summary = new DailySummary();&#10;            summary.setUser(user);&#10;            summary.setDate(date);&#10;            summary.setContent(content);&#10;            summary.setHighlights(highlights);&#10;            dailySummaryRepository.save(summary);&#10;            elasticsearchService.indexSummary(summary);&#10;        });&#10;    }&#10;&#10;    private String extractContent(String response) {&#10;        // TODO: Parse the Gemini API response and extract the main narrative (before ## Highlights)&#10;        return response.split(&quot;## Highlights&quot;)[0].trim();&#10;    }&#10;&#10;    private String extractHighlights(String response) {&#10;        // TODO: Parse the Gemini API response and extract the highlights section&#10;        String[] parts = response.split(&quot;## Highlights&quot;);&#10;        return parts.length &gt; 1 ? parts[1].trim() : &quot;&quot;;&#10;    }&#10;&#10;    static class GeminiRequest {&#10;        public String contents;&#10;        public GeminiRequest(String prompt) { this.contents = prompt; }&#10;    }&#10;} " />
              <option name="updatedContent" value="package com.example.diaensho_backend.services;&#10;&#10;import com.example.diaensho_backend.entities.*;&#10;import com.example.diaensho_backend.repositories.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.scheduling.annotation.Scheduled;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.reactive.function.client.WebClient;&#10;import reactor.core.publisher.Mono;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@Service&#10;public class AiSummaryService {&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;    @Autowired&#10;    private DiaryEntryRepository diaryEntryRepository;&#10;    @Autowired&#10;    private AppUsageStatRepository appUsageStatRepository;&#10;    @Autowired&#10;    private DailySummaryRepository dailySummaryRepository;&#10;    @Autowired&#10;    private DatabaseSearchService searchService;&#10;    @Autowired&#10;    private WebClient.Builder webClientBuilder;&#10;&#10;    @Value(&quot;${gemini.api.key:YOUR_GEMINI_API_KEY}&quot;)&#10;    private String geminiApiKey;&#10;&#10;    private static final String GEMINI_API_URL = &quot;https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent&quot;;&#10;    private static final String PROMPT_TEMPLATE = &quot;You are an insightful diary assistant. The following is a collection of raw, timestamped thoughts and app screen time data from a user's day. Your task is to: 1. Correct any spelling or grammatical errors in the thoughts. 2. Weave all the information into a cohesive, first-person narrative summary of the day. 3. Separately, identify 1-3 of the most inquisitive, creative, or exciting thoughts and list them under a '## Highlights' section.&quot;;&#10;&#10;    @Scheduled(cron = &quot;0 0 23 * * *&quot;)&#10;    public void generateDailySummaries() {&#10;        LocalDate today = LocalDate.now();&#10;        List&lt;User&gt; users = userRepository.findAll();&#10;        for (User user : users) {&#10;            List&lt;DiaryEntry&gt; entries = diaryEntryRepository.findAllByUserAndTimestampBetween(&#10;                    user, today.atStartOfDay(), today.plusDays(1).atStartOfDay());&#10;            List&lt;AppUsageStat&gt; stats = appUsageStatRepository.findAllByUserAndDate(user, today);&#10;            if (entries.isEmpty() &amp;&amp; stats.isEmpty()) continue;&#10;            &#10;            StringBuilder prompt = new StringBuilder(PROMPT_TEMPLATE + &quot;\n\n&quot;);&#10;            prompt.append(&quot;Diary Entries:\n&quot;);&#10;            for (DiaryEntry entry : entries) {&#10;                prompt.append(&quot;[&quot;).append(entry.getTimestamp()).append(&quot;] &quot;).append(entry.getText()).append(&quot;\n&quot;);&#10;            }&#10;            prompt.append(&quot;\nApp Usage Stats:\n&quot;);&#10;            for (AppUsageStat stat : stats) {&#10;                long minutes = stat.getTotalTimeInForeground() / 60;&#10;                prompt.append(stat.getPackageName()).append(&quot;: &quot;)&#10;                        .append(minutes).append(&quot; minutes\n&quot;);&#10;            }&#10;            callGeminiAndSaveSummary(user, today, prompt.toString());&#10;        }&#10;    }&#10;&#10;    private void callGeminiAndSaveSummary(User user, LocalDate date, String prompt) {&#10;        WebClient webClient = webClientBuilder.build();&#10;        &#10;        GeminiRequest request = new GeminiRequest();&#10;        request.contents = List.of(Map.of(&quot;parts&quot;, List.of(Map.of(&quot;text&quot;, prompt))));&#10;        &#10;        Mono&lt;GeminiResponse&gt; responseMono = webClient.post()&#10;                .uri(GEMINI_API_URL + &quot;?key=&quot; + geminiApiKey)&#10;                .header(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .bodyValue(request)&#10;                .retrieve()&#10;                .bodyToMono(GeminiResponse.class);&#10;                &#10;        responseMono.subscribe(&#10;            response -&gt; {&#10;                String generatedText = extractGeneratedText(response);&#10;                String content = extractContent(generatedText);&#10;                String highlights = extractHighlights(generatedText);&#10;                &#10;                DailySummary summary = new DailySummary();&#10;                summary.setUser(user);&#10;                summary.setDate(date);&#10;                summary.setContent(content);&#10;                summary.setHighlights(highlights);&#10;                dailySummaryRepository.save(summary);&#10;                &#10;                // Index in our database search service&#10;                searchService.indexSummary(summary);&#10;            },&#10;            error -&gt; {&#10;                System.err.println(&quot;Error calling Gemini API: &quot; + error.getMessage());&#10;                // Create a simple fallback summary&#10;                createFallbackSummary(user, date);&#10;            }&#10;        );&#10;    }&#10;&#10;    private String extractGeneratedText(GeminiResponse response) {&#10;        try {&#10;            return response.candidates.get(0).content.parts.get(0).text;&#10;        } catch (Exception e) {&#10;            return &quot;Unable to generate summary due to API response format.&quot;;&#10;        }&#10;    }&#10;&#10;    private String extractContent(String response) {&#10;        if (response.contains(&quot;## Highlights&quot;)) {&#10;            return response.split(&quot;## Highlights&quot;)[0].trim();&#10;        }&#10;        return response.trim();&#10;    }&#10;&#10;    private String extractHighlights(String response) {&#10;        String[] parts = response.split(&quot;## Highlights&quot;);&#10;        return parts.length &gt; 1 ? parts[1].trim() : &quot;No highlights identified.&quot;;&#10;    }&#10;&#10;    private void createFallbackSummary(User user, LocalDate date) {&#10;        DailySummary summary = new DailySummary();&#10;        summary.setUser(user);&#10;        summary.setDate(date);&#10;        summary.setContent(&quot;Summary generation temporarily unavailable. Please check your entries manually.&quot;);&#10;        summary.setHighlights(&quot;Unable to generate highlights at this time.&quot;);&#10;        dailySummaryRepository.save(summary);&#10;    }&#10;&#10;    static class GeminiRequest {&#10;        public List&lt;Map&lt;String, Object&gt;&gt; contents;&#10;    }&#10;&#10;    static class GeminiResponse {&#10;        public List&lt;Candidate&gt; candidates;&#10;        &#10;        static class Candidate {&#10;            public Content content;&#10;            &#10;            static class Content {&#10;                public List&lt;Part&gt; parts;&#10;                &#10;                static class Part {&#10;                    public String text;&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/services/DatabaseSearchService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/diaensho_backend/services/DatabaseSearchService.java" />
              <option name="updatedContent" value="package com.example.diaensho_backend.services;&#10;&#10;import com.example.diaensho_backend.dto.SearchResponse;&#10;import com.example.diaensho_backend.entities.DailySummary;&#10;import com.example.diaensho_backend.entities.User;&#10;import com.example.diaensho_backend.repositories.DailySummaryRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class DatabaseSearchService {&#10;    @Autowired&#10;    private DailySummaryRepository dailySummaryRepository;&#10;&#10;    public void indexSummary(DailySummary summary) {&#10;        // No need to index separately since we're using database search&#10;        // This method is kept for compatibility with existing code&#10;    }&#10;&#10;    public List&lt;SearchResponse&gt; searchSummaries(String query, User user) {&#10;        List&lt;DailySummary&gt; summaries = dailySummaryRepository.findAllByUser(user);&#10;        &#10;        // Simple text search in content and highlights&#10;        return summaries.stream()&#10;                .filter(summary -&gt; containsIgnoreCase(summary.getContent(), query) || &#10;                                 containsIgnoreCase(summary.getHighlights(), query))&#10;                .map(this::toResponse)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    private boolean containsIgnoreCase(String text, String query) {&#10;        if (text == null || query == null) return false;&#10;        return text.toLowerCase().contains(query.toLowerCase());&#10;    }&#10;&#10;    private SearchResponse toResponse(DailySummary summary) {&#10;        SearchResponse response = new SearchResponse();&#10;        response.setId(summary.getId());&#10;        response.setContent(summary.getContent());&#10;        response.setHighlights(summary.getHighlights());&#10;        response.setDate(summary.getDate());&#10;        return response;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application-prod.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application-prod.properties" />
              <option name="updatedContent" value="spring.application.name=diaensho-backend&#10;&#10;# Database Configuration (using environment variables for production)&#10;spring.datasource.url=${DATABASE_URL:jdbc:postgresql://pg-27c89fc-lirice.b.aivencloud.com:16806/defaultdb?sslmode=require}&#10;spring.datasource.username=${DATABASE_USERNAME:avnadmin}&#10;spring.datasource.password=${DATABASE_PASSWORD:AVNS_axf0eg5kjmzrNIH4fib}&#10;spring.datasource.driver-class-name=org.postgresql.Driver&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=false&#10;spring.jpa.open-in-view=false&#10;&#10;# Server Configuration&#10;server.port=${PORT:8080}&#10;server.servlet.context-path=/&#10;&#10;# CORS Configuration&#10;spring.web.cors.allowed-origins=*&#10;spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS&#10;spring.web.cors.allowed-headers=*&#10;&#10;# Gemini AI Configuration&#10;gemini.api.key=${GEMINI_API_KEY:AIzaSyAnCvX2Ml_DAnVAen2TyE1I9ZWvxXy9Ddg}&#10;&#10;# JWT Configuration&#10;jwt.secret=${JWT_SECRET:diaensho_secret_key_that_is_long_enough_for_hmac_sha256_algorithm}&#10;jwt.expiration=${JWT_EXPIRATION:86400000}&#10;&#10;# Actuator Configuration for health checks&#10;management.endpoints.web.exposure.include=health,info&#10;management.endpoint.health.show-details=when-authorized&#10;management.endpoints.web.base-path=/actuator&#10;&#10;# Logging Configuration for Production&#10;logging.level.com.example.diaensho_backend=INFO&#10;logging.level.org.springframework.security=WARN&#10;logging.level.org.hibernate.SQL=WARN&#10;logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n&#10;logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>